package dev.karan.vcardelalpha.coreClasses;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.StringJoiner;
/*
┬  ┬┌─┐┌─┐┬─┐┌┬┐┌┐┌┌─┐┌┬┐┬┬  ┬┌─┐
└┐┌┘│  ├─┤├┬┘ │││││├─┤ │ │└┐┌┘├┤
 └┘ └─┘┴ ┴┴└──┴┘┘└┘┴ ┴ ┴ ┴ └┘ └─┘
 VCARDNATIVE
*/

/**
 * vCardNative class represents a virtual contact card. It encapsulates various details
 * about a person including identification details, communication details, address details,
 * organization details, and additional details.
 *
 * @author Karan A. Raut
 * @version 1.0
 */
public final class vCardNative {

    /*
        ┬┌┬┐┌─┐┌┐┌┌┬┐┬┌─┐┬┌─┐┌─┐┌┬┐┬┌─┐┌┐┌  ┌┬┐┌─┐┌┬┐┌─┐┬┬  ┌─┐
        │ ││├┤ │││ │ │├┤ ││  ├─┤ │ ││ ││││   ││├┤  │ ├─┤││  └─┐
        ┴─┴┘└─┘┘└┘ ┴ ┴└  ┴└─┘┴ ┴ ┴ ┴└─┘┘└┘  ─┴┘└─┘ ┴ ┴ ┴┴┴─┘└─┘
        IDENTIFICATION DETAILS
    */

    /**
     * The prefix associated with the name (e.g., Mr., Ms., Dr.).
     */
    private String prefix;

    /**
     * The person's first name.
     */
    private String firstName;

    /**
     * The person's middle name (optional).
     */
    private String middleName;

    /**
     * The person's last name.
     */
    private String lastName;

    /**
     * The suffix associated with the name (e.g., Jr., Sr., III).
     */
    private String suffix;

    /**
     * The person's nickname (optional).
     */
    private String nickName;

    /**
     * The person's date of birth.
     */
    private LocalDate dob;

    /*
        ┌─┐┌─┐┌┬┐┌┬┐┬ ┬┌┐┌┬┌─┐┌─┐┌┬┐┬┌─┐┌┐┌  ┌┬┐┌─┐┌┬┐┌─┐┬┬  ┌─┐
        │  │ ││││││││ ││││││  ├─┤ │ ││ ││││   ││├┤  │ ├─┤││  └─┐
        └─┘└─┘┴ ┴┴ ┴└─┘┘└┘┴└─┘┴ ┴ ┴ ┴└─┘┘└┘  ─┴┘└─┘ ┴ ┴ ┴┴┴─┘└─┘
        COMMUNICATION DETAILS
    */

    /**
     * The preferred phone number.
     */
    private String prefPhNum;

    /**
     * The primary mobile number.
     */
    private String priMobNum;

    /**
     * The secondary mobile number.
     */
    private String secMobNum;

    /**
     * The home telephone number.
     */
    private String homeTelNum;

    /**
     * The personal email address.
     */
    private String personalEmail;

    /**
     * The work telephone number.
     */
    private String workTelNum;

    /**
     * The work email address.
     */
    private String workEmail;

    /*
        ┌─┐┌┬┐┌┬┐┬─┐┌─┐┌─┐┌─┐  ┌┬┐┌─┐┌┬┐┌─┐┬┬  ┌─┐
        ├─┤ ││ ││├┬┘├┤ └─┐└─┐   ││├┤  │ ├─┤││  └─┐
        ┴ ┴─┴┘─┴┘┴└─└─┘└─┘└─┘  ─┴┘└─┘ ┴ ┴ ┴┴┴─┘└─┘
        ADDRESS DETAILS
    */
    /**
     * The street address of the home.
     */
    private String homeStreet;

    /**
     * The city of the home address.
     */
    private String homeCity;

    /**
     * The state or region of the home address.
     */
    private String homeState;

    /**
     * The postal code of the home address.
     */
    private String homePostalCode;

    /**
     * The country of the home address.
     */
    private String homeCountry;

    /**
     * The street address of the workplace.
     */
    private String workStreet;

    /**
     * The city of the workplace address.
     */
    private String workCity;

    /**
     * The state or region of the workplace address.
     */
    private String workState;

    /**
     * The postal code of the workplace address.
     */
    private String workPostalCode;

    /**
     * The country of the workplace address.
     */
    private String workCountry;

    /*
        ┌─┐┬─┐┌─┐┌─┐┌┐┌┬┌─┐┌─┐┌┬┐┬┌─┐┌┐┌  ┌┬┐┌─┐┌┬┐┌─┐┬┬  ┌─┐
        │ │├┬┘│ ┬├─┤││││┌─┘├─┤ │ ││ ││││   ││├┤  │ ├─┤││  └─┐
        └─┘┴└─└─┘┴ ┴┘└┘┴└─┘┴ ┴ ┴ ┴└─┘┘└┘  ─┴┘└─┘ ┴ ┴ ┴┴┴─┘└─┘
        ORGANIZATION DETAILS
    */

    /**
     * The role within the organization.
     */
    private String role;

    /**
     * The title within the organization.
     */
    private String title;

    /**
     * The department within the organization.
     */
    private String department;

    /**
     * The name of the organization.
     */
    private String organization;

    /*
        ┌─┐┌┬┐┌┬┐┬┌┬┐┬┌─┐┌┐┌┌─┐┬    ┌┬┐┌─┐┌┬┐┌─┐┬┬  ┌─┐
        ├─┤ ││ │││ │ ││ ││││├─┤│     ││├┤  │ ├─┤││  └─┐
        ┴ ┴─┴┘─┴┘┴ ┴ ┴└─┘┘└┘┴ ┴┴─┘  ─┴┘└─┘ ┴ ┴ ┴┴┴─┘└─┘
        ADDITIONAL DETAILS
    */

    /**
     * Any additional note or information.
     */
    private String note;

    /**
     * The URL associated with the person.
     */
    private String url;

    /**
     * Custom labels for additional information (e.g., "Friend", "Colleague").
     */
    private String[] labels;

    /**
     * The gender of the person.
     */
    private char gender;

    /*
        ┌─┐┌─┐┌┬┐┌┬┐┌─┐┬─┐┌─┐
        └─┐├┤  │  │ ├┤ ├┬┘└─┐
        └─┘└─┘ ┴  ┴ └─┘┴└─└─┘
        SETTERS
    */

    /**
     * Sets the identification details of the entity represented by the vCard.
     * This method should be used for both individual persons and organizations.
     *
     * @param prefix     The prefix associated with the name (e.g., Mr., Ms., Dr.).
     * @param firstName  The first name of the entity.
     * @param middleName The middle name of the entity (optional).
     * @param lastName   The last name of the entity.
     * @param suffix     The suffix associated with the name (e.g., Jr., Sr., III).
     * @param nickName   The nickname of the entity (optional).
     * @param dob        The date of birth of the entity (for persons) or establishment date (for organizations).
     */
    public void setIdentificationDetails(String prefix, String firstName, String middleName, String lastName, String suffix, String nickName, LocalDate dob) {
        this.prefix = prefix;
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.suffix = suffix;
        this.nickName = nickName;
        this.dob = dob;
    }

    /**
     * Sets the communication details of the entity represented by the vCard.
     * This method should be used for both individual persons and organizations.
     *
     * @param prefPhNum     The preferred phone number of the entity.
     * @param priMobNum     The primary mobile number of the entity.
     * @param secMobNum     The secondary mobile number of the entity.
     * @param homeTelNum    The home telephone number of the entity.
     * @param personalEmail The personal email address of the entity.
     * @param workTelNum    The work telephone number of the entity.
     * @param workEmail     The work email address of the entity.
     */
    public void setCommunicationDetails(String prefPhNum, String priMobNum, String secMobNum, String homeTelNum, String personalEmail, String workTelNum, String workEmail) {
        this.prefPhNum = prefPhNum;
        this.priMobNum = priMobNum;
        this.secMobNum = secMobNum;
        this.homeTelNum = homeTelNum;
        this.personalEmail = personalEmail;
        this.workTelNum = workTelNum;
        this.workEmail = workEmail;
    }

    /**
     * Sets the address details of the entity represented by the vCard.
     * This method should be used for both individual persons and organizations.
     *
     * @param homeStreet     The street address of the entity's home or headquarters.
     * @param homeCity       The city of the entity's home or headquarters.
     * @param homeState      The state or region of the entity's home or headquarters.
     * @param homePostalCode The postal code of the entity's home or headquarters.
     * @param homeCountry    The country of the entity's home or headquarters.
     * @param workStreet     The street address of the entity's work or branch office.
     * @param workCity       The city of the entity's work or branch office.
     * @param workState      The state or region of the entity's work or branch office.
     * @param workPostalCode The postal code of the entity's work or branch office.
     * @param workCountry    The country of the entity's work or branch office.
     */
    public void setAddressDetails(String homeStreet, String homeCity, String homeState, String homePostalCode, String homeCountry, String workStreet, String workCity, String workState, String workPostalCode, String workCountry) {
        this.homeStreet = homeStreet;
        this.homeCity = homeCity;
        this.homeState = homeState;
        this.homePostalCode = homePostalCode;
        this.homeCountry = homeCountry;
        this.workStreet = workStreet;
        this.workCity = workCity;
        this.workState = workState;
        this.workPostalCode = workPostalCode;
        this.workCountry = workCountry;
    }

    /**
     * Sets the organization details of the entity represented by the vCard.
     * This method should be used for organizations only.
     *
     * @param role         The role within the organization.
     * @param title        The title within the organization.
     * @param department   The department within the organization.
     * @param organization The name of the organization.
     */
    public void setOrganizationDetails(String role, String title, String department, String organization) {
        this.role = role;
        this.title = title;
        this.department = department;
        this.organization = organization;
    }

    /**
     * Sets any additional note or information about the entity represented by the vCard.
     *
     * @param note The note to be set.
     */
    public void setNote(String note) {
        this.note = note;
    }

    /**
     * Sets custom labels for additional information about the entity represented by the vCard.
     *
     * @param labels The custom labels to be set.
     */
    public void setLabels(String[] labels) {
        this.labels = labels;
    }

    /**
     * Sets the URL associated with the entity represented by the vCard.
     *
     * @param url The URL to be set.
     */
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Sets the gender of the individual represented by the vCard.
     * This method should be used for individuals only.
     *
     * @param gender The gender to be set.
     */
    public void setGender(char gender) {
        this.gender = gender;
    }


    /*
        ┌─┐┌─┐┌┬┐┌┬┐┌─┐┬─┐┌─┐
        │ ┬├┤  │  │ ├┤ ├┬┘└─┐
        └─┘└─┘ ┴  ┴ └─┘┴└─└─┘
        GETTERS
    */

    /**
     * Retrieves the prefix associated with the entity's name.
     *
     * @return The prefix associated with the name.
     */
    public String getPrefix() {
        return prefix;
    }

    /**
     * Retrieves the first name of the entity.
     *
     * @return The first name of the entity.
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * Retrieves the middle name of the entity.
     *
     * @return The middle name of the entity. Returns null if not set.
     */
    public String getMiddleName() {
        return middleName;
    }

    /**
     * Retrieves the last name of the entity.
     *
     * @return The last name of the entity.
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Retrieves the suffix associated with the entity's name.
     *
     * @return The suffix associated with the name.
     */
    public String getSuffix() {
        return suffix;
    }

    /**
     * Retrieves the nickname of the entity.
     *
     * @return The nickname of the entity. Returns null if not set.
     */
    public String getNickName() {
        return nickName;
    }

    /**
     * Retrieves the date of birth of the entity.
     *
     * @return The date of birth of the entity.
     */
    public LocalDate getDob() {
        return dob;
    }

    /**
     * Retrieves the preferred phone number of the entity.
     *
     * @return The preferred phone number of the entity.
     */
    public String getPrefPhNum() {
        return prefPhNum;
    }

    /**
     * Retrieves the primary mobile number of the entity.
     *
     * @return The primary mobile number of the entity.
     */
    public String getPriMobNum() {
        return priMobNum;
    }

    /**
     * Retrieves the secondary mobile number of the entity.
     *
     * @return The secondary mobile number of the entity.
     */
    public String getSecMobNum() {
        return secMobNum;
    }

    /**
     * Retrieves the home telephone number of the entity.
     *
     * @return The home telephone number of the entity.
     */
    public String getHomeTelNum() {
        return homeTelNum;
    }

    /**
     * Retrieves the personal email address of the entity.
     *
     * @return The personal email address of the entity.
     */
    public String getPersonalEmail() {
        return personalEmail;
    }

    /**
     * Retrieves the work telephone number of the entity.
     *
     * @return The work telephone number of the entity.
     */
    public String getWorkTelNum() {
        return workTelNum;
    }

    /**
     * Retrieves the work email address of the entity.
     *
     * @return The work email address of the entity.
     */
    public String getWorkEmail() {
        return workEmail;
    }

    /**
     * Retrieves the home street address of the entity.
     *
     * @return The home street address of the entity.
     */
    public String getHomeStreet() {
        return homeStreet;
    }

    /**
     * Retrieves the home city of the entity.
     *
     * @return The home city of the entity.
     */
    public String getHomeCity() {
        return homeCity;
    }

    /**
     * Retrieves the home state of the entity.
     *
     * @return The home state of the entity.
     */
    public String getHomeState() {
        return homeState;
    }

    /**
     * Retrieves the home postal code of the entity.
     *
     * @return The home postal code of the entity.
     */
    public String getHomePostalCode() {
        return homePostalCode;
    }

    /**
     * Retrieves the home country of the entity.
     *
     * @return The home country of the entity.
     */
    public String getHomeCountry() {
        return homeCountry;
    }

    /**
     * Retrieves the work street address of the entity.
     *
     * @return The work street address of the entity.
     */
    public String getWorkStreet() {
        return workStreet;
    }

    /**
     * Retrieves the work city of the entity.
     *
     * @return The work city of the entity.
     */
    public String getWorkCity() {
        return workCity;
    }

    /**
     * Retrieves the work state of the entity.
     *
     * @return The work state of the entity.
     */
    public String getWorkState() {
        return workState;
    }

    /**
     * Retrieves the work postal code of the entity.
     *
     * @return The work postal code of the entity.
     */
    public String getWorkPostalCode() {
        return workPostalCode;
    }

    /**
     * Retrieves the work country of the entity.
     *
     * @return The work country of the entity.
     */
    public String getWorkCountry() {
        return workCountry;
    }

    /**
     * Retrieves the role of the entity within the organization.
     *
     * @return The role of the entity.
     */
    public String getRole() {
        return role;
    }

    /**
     * Retrieves the title of the entity.
     *
     * @return The title of the entity.
     */
    public String getTitle() {
        return title;
    }

    /**
     * Retrieves the department of the entity within the organization.
     *
     * @return The department of the entity.
     */
    public String getDepartment() {
        return department;
    }

    /**
     * Retrieves the organization the entity is associated with.
     *
     * @return The organization the entity is associated with.
     */
    public String getOrganization() {
        return organization;
    }

    /**
     * Retrieves additional notes or remarks about the entity.
     *
     * @return Additional notes or remarks about the entity.
     */
    public String getNote() {
        return note;
    }

    /**
     * Retrieves the URL associated with the entity.
     *
     * @return The URL associated with the entity.
     */
    public String getUrl() {
        return url;
    }

    /**
     * Retrieves the labels associated with the entity.
     *
     * @return The labels associated with the entity.
     */
    public String[] getLabels() {
        return labels;
    }

    /**
     * Retrieves the gender of the entity.
     *
     * @return The gender of the entity.
     */
    public char getGender() {
        return gender;
    }

    /*
        ┬ ┬┌┬┐┬┬  ┬┌┬┐┬ ┬  ┌┬┐┌─┐┌┬┐┬ ┬┌─┐┌┬┐┌─┐
        │ │ │ ││  │ │ └┬┘  │││├┤  │ ├─┤│ │ ││└─┐
        └─┘ ┴ ┴┴─┘┴ ┴  ┴   ┴ ┴└─┘ ┴ ┴ ┴└─┘─┴┘└─┘
        UTILITY METHODS
    */

    /**
     * Generates a string representation of the entity's details.
     * It includes identification details, communication details,
     * address details, organization details, and additional details.
     *
     * @return A string containing the vCard representation of the entity.
     */
    @Override
    public String toString() {
        StringJoiner vCardNativeToString = new StringJoiner("\n");

        // Identification Details
        vCardNativeToString.add("Identification Details {")
                .add("\tPrefix: " + prefix)
                .add("\tFirst Name: " + firstName)
                .add("\tMiddle Name: " + middleName)
                .add("\tLast Name: " + lastName)
                .add("\tSuffix: " + suffix)
                .add("\tNick Name: " + nickName)
                .add("\tDate of Birth: " + dob)
                .add("}");

        // Communication Details
        vCardNativeToString.add("Communication Details {")
                .add("\tPreferred Phone Number: " + prefPhNum)
                .add("\tPrimary Mobile Number: " + priMobNum)
                .add("\tSecondary Mobile Number: " + secMobNum)
                .add("\tHome Telephone Number: " + homeTelNum)
                .add("\tPersonal Email: " + personalEmail)
                .add("\tWork Telephone Number: " + workTelNum)
                .add("\tWork Email: " + workEmail)
                .add("}");

        // Address Details
        vCardNativeToString.add("Address Details {")
                .add("\tHome Street: " + homeStreet)
                .add("\tHome City: " + homeCity)
                .add("\tHome State: " + homeState)
                .add("\tHome Postal Code: " + homePostalCode)
                .add("\tHome Country: " + homeCountry)
                .add("\tWork Street: " + workStreet)
                .add("\tWork City: " + workCity)
                .add("\tWork State: " + workState)
                .add("\tWork Postal Code: " + workPostalCode)
                .add("\tWork Country: " + workCountry)
                .add("}");

        // Organization Details
        vCardNativeToString.add("Organization Details {")
                .add("\tRole: " + role)
                .add("\tTitle: " + title)
                .add("\tDepartment: " + department)
                .add("\tOrganization: " + organization)
                .add("}");

        // Additional Details
        vCardNativeToString.add("Additional Details {")
                .add("\tNote: " + note)
                .add("\tURL: " + url)
                .add("\tLabels: " + Arrays.toString(labels))
                .add("\tGender: " + gender)
                .add("}");
        return vCardNativeToString.toString();
    }

    /*
    ┌─┐┌┬┐┌─┐┌┬┐┬┌─┐  ┬  ┬┌─┐┬─┐┬┌─┐┌┐ ┬  ┌─┐
    └─┐ │ ├─┤ │ ││    └┐┌┘├─┤├┬┘│├─┤├┴┐│  ├┤
    └─┘ ┴ ┴ ┴ ┴ ┴└─┘   └┘ ┴ ┴┴└─┴┴ ┴└─┘┴─┘└─┘
    */

    /**
     * A static counter to keep track of the number of vCardNative instances created.
     */
    private static int vCardNativeInstanceCounter;

    /*
        ┬┌┐┌┌─┐┌┬┐┌─┐┌┐┌┌─┐┌─┐  ┬┌┐┌┬┌┬┐┬┌─┐┬  ┬┌─┐┌─┐┬─┐
        ││││└─┐ │ ├─┤││││  ├┤   │││││ │ │├─┤│  │┌─┘├┤ ├┬┘
        ┴┘└┘└─┘ ┴ ┴ ┴┘└┘└─┘└─┘  ┴┘└┘┴ ┴ ┴┴ ┴┴─┘┴└─┘└─┘┴└─
        INSTANCE INITIALIZER
    */

    /*
   Initializes a new instance of vCardNative and increments the instance counter.
   This initializer is automatically called whenever a new instance of vCardNative is created.
   It prints a message to indicate the creation of the instance.
   */ {
        vCardNativeInstanceCounter++;
        System.out.println("vCardNative instance $vcrdntv#" + vCardNativeInstanceCounter + "->" + this.hashCode()                    );
    }

}











































package dev.karan.vcardelalpha.coreClasses;

import dev.karan.vcardelalpha.utilityClasses.Handyman;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/*
┬  ┬┌─┐┌─┐┬─┐┌┬┐
└┐┌┘│  ├─┤├┬┘ ││
 └┘ └─┘┴ ┴┴└──┴┘
 VCARDNATIVE
*/

/**
 * The {@code vCard} class represents a vCard (Virtual Contact File) wrapper around the {@code vCardNative} class,
 * providing functionality to compose a vCard according to the vCard syntax (version 3.0).
 * This class facilitates the creation of vCard objects by converting data from the {@code vCardNative} format into
 * a properly formatted vCard string according to the vCard specification.
 * <p>
 * A vCard typically contains information such as contact details, communication details, address details,
 * organization details, and additional details like notes, URLs, labels, and gender information.
 * </p>
 * <p>
 * The class allows customization of vCard composition by specifying whether to capitalize the composed vCard
 * and specifying characters to escape during composition.
 * </p>
 * <p>
 * Instances of this class are immutable once initialized.
 * </p>
 *
 * @author Karan A. Raut
 * @version 1.0
 */
public final class vCard {

    /*
        ┬┌┐┌┌─┐┌┬┐┌─┐┌┐┌┌─┐┌─┐  ┬  ┬┌─┐┬─┐┬┌─┐┌┐ ┬  ┌─┐┌─┐
        ││││└─┐ │ ├─┤││││  ├┤   └┐┌┘├─┤├┬┘│├─┤├┴┐│  ├┤ └─┐
        ┴┘└┘└─┘ ┴ ┴ ┴┘└┘└─┘└─┘   └┘ ┴ ┴┴└─┴┴ ┴└─┘┴─┘└─┘└─┘
        INSTANCE VARIABLES
    */

    /**
     * Characters to escape when composing the vCard.
     */
    private final String charsToEscape;

    /**
     * Indicates whether to capitalize the composed vCard.
     */
    private final boolean capitalize;

    /**
     * The core vCard instance holding the contact information.
     */
    private final vCardNative core_vCard;

    /*
        ┌─┐┌─┐┌┐┌┌─┐┌┬┐┬─┐┬ ┬┌─┐┌┬┐┌─┐┬─┐┌─┐
        │  │ ││││└─┐ │ ├┬┘│ ││   │ │ │├┬┘└─┐
        └─┘└─┘┘└┘└─┘ ┴ ┴└─└─┘└─┘ ┴ └─┘┴└─└─┘
        CONSTRUCTORS
    */

    /**
     * Constructs a {@code vCard} object with the provided {@code source_vCard}, {@code capitalize}, and {@code charsToEscape}.
     * <p>
     * This constructor allows customization of vCard composition by specifying whether to capitalize the composed vCard
     * and specifying characters to escape during composition.
     * </p>
     *
     * @param source_vCard  The source {@code vCardNative} object containing contact information.
     * @param capitalize    Indicates whether to capitalize the composed vCard.
     * @param charsToEscape Characters to escape when composing the vCard.
     */
    public vCard(vCardNative source_vCard, boolean capitalize, String charsToEscape) {
        this.core_vCard = source_vCard;
        this.capitalize = capitalize;
        this.charsToEscape = charsToEscape;
    }

    /**
     * Constructs a {@code vCard} object with the provided {@code source_vCard} and {@code capitalize}.
     * <p>
     * This constructor sets default characters to escape during composition.
     * </p>
     *
     * @param source_vCard The source {@code vCardNative} object containing contact information.
     * @param capitalize   Indicates whether to capitalize the composed vCard.
     */
    public vCard(vCardNative source_vCard, boolean capitalize) {
        this.core_vCard = source_vCard;
        this.capitalize = capitalize;
        this.charsToEscape = "\\:;,";
    }

    /**
     * Constructs a {@code vCard} object with the provided {@code source_vCard}.
     * <p>
     * This constructor sets default characters to escape and does not capitalize the composed vCard.
     * </p>
     *
     * @param source_vCard The source {@code vCardNative} object containing contact information.
     */
    public vCard(vCardNative source_vCard) {
        this.core_vCard = source_vCard;
        this.capitalize = false;
        this.charsToEscape = "\\:;,";
    }

    /*
        ┌┬┐┌─┐┌┬┐┬ ┬┌─┐┌┬┐  ┌─┐┌─┐┬─┐  ┌─┐┌─┐┌┬┐┌─┐┌─┐┌─┐┬┌┐┌┌─┐  ┬  ┬┌─┐┌─┐┬─┐┌┬┐
        │││├┤  │ ├─┤│ │ ││  ├┤ │ │├┬┘  │  │ ││││├─┘│ │└─┐│││││ ┬  └┐┌┘│  ├─┤├┬┘ ││
        ┴ ┴└─┘ ┴ ┴ ┴└─┘─┴┘  └  └─┘┴└─  └─┘└─┘┴ ┴┴  └─┘└─┘┴┘└┘└─┘   └┘ └─┘┴ ┴┴└──┴┘
        METHOD FOR COMPOSING vCARD
    */

    /**
     * Composes the vCard string according to the vCard syntax (version 3.0).
     * <p>
     * This method constructs a vCard string by concatenating various properties in accordance with the vCard syntax.
     * Each property is formatted according to the vCard specification, and lines are folded as needed to ensure
     * compliance with the 75-character line length limit.
     * </p>
     * <p>
     * The vCard string includes the following properties:
     * <ul>
     * <li>FN (Formatted Name)</li>
     * <li>N (Name)</li>
     * <li>NICKNAME</li>
     * <li>BDAY (Birthday)</li>
     * <li>TEL (Telephone Number) with various types (PREF, CELL, HOME, WORK)</li>
     * <li>EMAIL with types (X-PERSONAL, WORK)</li>
     * <li>ADR (Address) with types (HOME, WORK)</li>
     * <li>TITLE (Job Title)</li>
     * <li>ROLE (Role within the organization)</li>
     * <li>ORG (Organization) with department</li>
     * <li>NOTE (Additional notes)</li>
     * <li>URL (Website URL)</li>
     * <li>X-LABEL (Labels)</li>
     * <li>X-GENDER (Gender)</li>
     * </ul>
     * </p>
     * <p>
     * The method utilizes utility methods to process values, apply capitalization, and escape characters as necessary,
     * ensuring the proper formatting of each property.
     * </p>
     * <p>
     * The composed vCard string is returned with each property folded into multiple lines as needed to comply with
     * the vCard specification's line length limit.
     * </p>
     *
     * @return The composed vCard string adhering to the vCard syntax.
     */
    public String compose_vCard() {
        StringBuilder composed_vCard = new StringBuilder();
        composed_vCard
                .append("BEGIN:VCARD").append("\n")
                .append("VERSION:3.0").append("\n")
                .append(Handyman.foldLine(compose_FN_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_N_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_NICKNAME_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_BDAY_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_TELPREF_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_TELCELL1_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_TELCELL2_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_TELHOME_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_EMAILPERSONAL_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_TELWORK_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_EMAILWORK_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_ADRHOME_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_ADRWORK_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_TITLE_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_ROLE_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_ORG_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_NOTE_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_URL_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_LABEL_Property(), 75)).append("\n")
                .append(Handyman.foldLine(compose_GENDER_Property(), 75)).append("\n");
        return composed_vCard.toString();
    }

    /*
    ┌┬┐┌─┐┌┬┐┬ ┬┌─┐┌┬┐┌─┐  ┌─┐┌─┐┬─┐  ┌─┐┌─┐┌┬┐┌─┐┌─┐┌─┐┬┌┐┌┌─┐  ┬  ┬┌─┐┌─┐┬─┐┌┬┐  ┌─┐┬─┐┌─┐┌─┐┌─┐┬─┐┌┬┐┬┌─┐┌─┐
    │││├┤  │ ├─┤│ │ ││└─┐  ├┤ │ │├┬┘  │  │ ││││├─┘│ │└─┐│││││ ┬  └┐┌┘│  ├─┤├┬┘ ││  ├─┘├┬┘│ │├─┘├┤ ├┬┘ │ │├┤ └─┐
    ┴ ┴└─┘ ┴ ┴ ┴└─┘─┴┘└─┘  └  └─┘┴└─  └─┘└─┘┴ ┴┴  └─┘└─┘┴┘└┘└─┘   └┘ └─┘┴ ┴┴└──┴┘  ┴  ┴└─└─┘┴  └─┘┴└─ ┴ ┴└─┘└─┘
    ┌─┐┌─┐┌─┐┌─┐┬─┐┌┬┐┬┌┐┌┌─┐  ┌┬┐┌─┐  ┬  ┬┌─┐┌─┐┬─┐┌┬┐  ┌─┐┬ ┬┌┐┌┌┬┐┌─┐─┐ ┬
    ├─┤│  │  │ │├┬┘ │││││││ ┬   │ │ │  └┐┌┘│  ├─┤├┬┘ ││  └─┐└┬┘│││ │ ├─┤┌┴┬┘
    ┴ ┴└─┘└─┘└─┘┴└──┴┘┴┘└┘└─┘   ┴ └─┘   └┘ └─┘┴ ┴┴└──┴┘  └─┘ ┴ ┘└┘ ┴ ┴ ┴┴ └─
    METHODS FOR COMPOSING vCARD PROPERTIES ACCORDING TO THE vCARD SYNTAX
    */

    /**
     * Composes the formatted name (FN) property of the vCard.
     * <p>
     * The FN property represents the full name of the vCard holder. This method constructs the FN property
     * by concatenating the processed prefix, first name, middle name, last name, and suffix retrieved from
     * the core_vCard instance. Each component is properly formatted and appended to the FN property string.
     * </p>
     *
     * @return The formatted FN property string.
     */
    private String compose_FN_Property() {
        StringBuilder composedProperty = new StringBuilder();

        String processedPrefix = processVal(core_vCard.getPrefix());
        String processedFirstName = processVal(core_vCard.getFirstName());
        String processedMiddleName = processVal(core_vCard.getMiddleName());
        String processedLastName = processVal(core_vCard.getLastName());
        String processedSuffix = processVal(core_vCard.getSuffix());

        composedProperty
                .append("FN:")
                .append(!processedPrefix.isEmpty() ? processedPrefix + " " : "")
                .append(!processedFirstName.isEmpty() ? processedFirstName + " " : "")
                .append(!processedMiddleName.isEmpty() ? processedMiddleName + " " : "")
                .append(!processedLastName.isEmpty() ? processedLastName + " " : "")
                .append(processedSuffix);
        return composedProperty.toString();
    }

    /**
     * Composes the name (N) property of the vCard.
     * <p>
     * The N property represents the structured name of the vCard holder. This method constructs the N property
     * by concatenating the processed components (last name, first name, middle name, prefix, suffix) retrieved from
     * the core_vCard instance. Each component is properly formatted and separated by semicolons.
     * </p>
     *
     * @return The formatted N property string.
     */
    private String compose_N_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("N:")
                .append(processVal(core_vCard.getLastName())).append(";")
                .append(processVal(core_vCard.getFirstName())).append(";")
                .append(processVal(core_vCard.getMiddleName())).append(";")
                .append(processVal(core_vCard.getPrefix())).append(";")
                .append(processVal(core_vCard.getSuffix()));
        return composedProperty.toString();
    }

    /**
     * Composes the nickname (NICKNAME) property of the vCard.
     * <p>
     * The NICKNAME property represents the nickname of the vCard holder. This method constructs the NICKNAME property
     * by processing the nickname retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted NICKNAME property string.
     */
    private String compose_NICKNAME_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("NICKNAME:")
                .append(processVal(core_vCard.getNickName()));
        return composedProperty.toString();
    }

    /**
     * Composes the birthday (BDAY) property of the vCard.
     * <p>
     * The BDAY property represents the birthday of the vCard holder. This method constructs the BDAY property
     * by processing the date of birth retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted BDAY property string.
     */
    private String compose_BDAY_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("BDAY:")
                .append(processVal(core_vCard.getDob()));
        return composedProperty.toString();
    }

    /**
     * Composes the preferred telephone number (TEL;TYPE=PREF) property of the vCard.
     * <p>
     * The TEL;TYPE=PREF property represents the preferred telephone number of the vCard holder. This method constructs
     * the TEL;TYPE=PREF property by processing the preferred phone number retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted TEL;TYPE=PREF property string.
     */
    private String compose_TELPREF_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("TEL;TYPE=PREF:")
                .append(processVal(core_vCard.getPrefPhNum()));
        return composedProperty.toString();
    }

    /**
     * Composes the first cellular telephone number (TEL;TYPE=CELL) property of the vCard.
     * <p>
     * The TEL;TYPE=CELL property represents the first cellular telephone number of the vCard holder. This method constructs
     * the TEL;TYPE=CELL property by processing the primary mobile number retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted TEL;TYPE=CELL property string.
     */
    private String compose_TELCELL1_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("TEL;TYPE=CELL:")
                .append(processVal(core_vCard.getPriMobNum()));
        return composedProperty.toString();
    }

    /**
     * Composes the second cellular telephone number (TEL;TYPE=CELL) property of the vCard.
     * <p>
     * The TEL;TYPE=CELL property represents the second cellular telephone number of the vCard holder. This method constructs
     * the TEL;TYPE=CELL property by processing the secondary mobile number retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted TEL;TYPE=CELL property string.
     */
    private String compose_TELCELL2_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("TEL;TYPE=CELL:")
                .append(processVal(core_vCard.getSecMobNum()));
        return composedProperty.toString();
    }

    /**
     * Composes the home telephone number (TEL;TYPE=HOME) property of the vCard.
     * <p>
     * The TEL;TYPE=HOME property represents the home telephone number of the vCard holder. This method constructs
     * the TEL;TYPE=HOME property by processing the home telephone number retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted TEL;TYPE=HOME property string.
     */
    private String compose_TELHOME_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("TEL;TYPE=HOME:")
                .append(processVal(core_vCard.getHomeTelNum()));
        return composedProperty.toString();
    }

    /**
     * Composes the personal email address (EMAIL;TYPE=X-PERSONAL) property of the vCard.
     * <p>
     * The EMAIL;TYPE=X-PERSONAL property represents the personal email address of the vCard holder. This method constructs
     * the EMAIL;TYPE=X-PERSONAL property by processing the personal email retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted EMAIL;TYPE=X-PERSONAL property string.
     */
    private String compose_EMAILPERSONAL_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("EMAIL;TYPE=X-PERSONAL:")
                .append(processVal(core_vCard.getPersonalEmail()));
        return composedProperty.toString();
    }

    /**
     * Composes the work telephone number (TEL;TYPE=WORK) property of the vCard.
     * <p>
     * The TEL;TYPE=WORK property represents the work telephone number of the vCard holder. This method constructs
     * the TEL;TYPE=WORK property by processing the work telephone number retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted TEL;TYPE=WORK property string.
     */
    private String compose_TELWORK_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("TEL;TYPE=WORK:")
                .append(processVal(core_vCard.getWorkTelNum()));
        return composedProperty.toString();
    }

    /**
     * Composes the work email address (EMAIL;TYPE=WORK) property of the vCard.
     * <p>
     * The EMAIL;TYPE=WORK property represents the work email address of the vCard holder. This method constructs
     * the EMAIL;TYPE=WORK property by processing the work email retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted EMAIL;TYPE=WORK property string.
     */
    private String compose_EMAILWORK_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("EMAIL;TYPE=WORK:")
                .append(processVal(core_vCard.getWorkEmail()));
        return composedProperty.toString();
    }

    /**
     * Composes the home address (ADR;TYPE=HOME) property of the vCard.
     * <p>
     * The ADR;TYPE=HOME property represents the home address of the vCard holder. This method constructs
     * the ADR;TYPE=HOME property by processing the components of the home address retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted ADR;TYPE=HOME property string.
     */
    private String compose_ADRHOME_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("ADR;TYPE=HOME:;;")
                .append(processVal(core_vCard.getHomeStreet())).append(";")
                .append(processVal(core_vCard.getHomeCity())).append(";")
                .append(processVal(core_vCard.getHomeState())).append(";")
                .append(processVal(core_vCard.getHomePostalCode())).append(";")
                .append(processVal(core_vCard.getHomeCountry()));
        return composedProperty.toString();
    }

    /**
     * Composes the work address (ADR;TYPE=WORK) property of the vCard.
     * <p>
     * The ADR;TYPE=WORK property represents the work address of the vCard holder. This method constructs
     * the ADR;TYPE=WORK property by processing the components of the work address retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted ADR;TYPE=WORK property string.
     */
    private String compose_ADRWORK_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("ADR;TYPE=WORK:;;")
                .append(processVal(core_vCard.getWorkStreet())).append(";")
                .append(processVal(core_vCard.getWorkCity())).append(";")
                .append(processVal(core_vCard.getWorkState())).append(";")
                .append(processVal(core_vCard.getWorkPostalCode())).append(";")
                .append(processVal(core_vCard.getWorkCountry()));
        return composedProperty.toString();
    }

    /**
     * Composes the title (TITLE) property of the vCard.
     * <p>
     * The TITLE property represents the title of the vCard holder. This method constructs
     * the TITLE property by processing the title retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted TITLE property string.
     */
    private String compose_TITLE_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("TITLE:")
                .append(processVal(core_vCard.getTitle()));
        return composedProperty.toString();
    }

    /**
     * Composes the role (ROLE) property of the vCard.
     * <p>
     * The ROLE property represents the role or occupation of the vCard holder. This method constructs
     * the ROLE property by processing the role retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted ROLE property string.
     */
    private String compose_ROLE_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("ROLE:")
                .append(processVal(core_vCard.getRole()));
        return composedProperty.toString();
    }

    /**
     * Composes the organization (ORG) property of the vCard.
     * <p>
     * The ORG property represents the organization or company information of the vCard holder. This method constructs
     * the ORG property by processing the organization and department retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted ORG property string.
     */
    private String compose_ORG_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("ORG:")
                .append(processVal(core_vCard.getOrganization())).append(";")
                .append(processVal(core_vCard.getDepartment()));
        return composedProperty.toString();
    }

    /**
     * Composes the note (NOTE) property of the vCard.
     * <p>
     * The NOTE property represents additional notes or comments related to the vCard holder. This method constructs
     * the NOTE property by processing the note retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted NOTE property string.
     */
    private String compose_NOTE_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("NOTE:")
                .append(processVal(core_vCard.getNote()));
        return composedProperty.toString();
    }

    /**
     * Composes the URL (URL) property of the vCard.
     * <p>
     * The URL property represents the website URL associated with the vCard holder. This method constructs
     * the URL property by processing the URL retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted URL property string.
     */
    private String compose_URL_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("URL:")
                .append(processVal(core_vCard.getUrl()));
        return composedProperty.toString();
    }

    /**
     * Composes the custom label (X-LABEL) property of the vCard.
     * <p>
     * The X-LABEL property represents custom labels associated with the vCard holder. This method constructs
     * the X-LABEL property by processing the labels retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted X-LABEL property string.
     */
    private String compose_LABEL_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty.append("X-LABEL:");
        for (String label : core_vCard.getLabels()) {
            String processedLabel = processVal(label);
            composedProperty.append(!processedLabel.isEmpty() ? processedLabel + ";" : "");
        }
        composedProperty.append(processVal("created_by_vCardel_Alpha"));
        return composedProperty.toString();
    }

    /**
     * Composes the custom gender (X-GENDER) property of the vCard.
     * <p>
     * The X-GENDER property represents the gender information of the vCard holder. This method constructs
     * the X-GENDER property by processing the gender retrieved from the core_vCard instance.
     * </p>
     *
     * @return The formatted X-GENDER property string.
     */
    private String compose_GENDER_Property() {
        StringBuilder composedProperty = new StringBuilder();
        composedProperty
                .append("X-GENDER:")
                .append(processVal(core_vCard.getGender()));
        return composedProperty.toString();
    }

    /*
        ┬ ┬┌┬┐┬┬  ┬┌┬┐┬ ┬  ┌┬┐┌─┐┌┬┐┬ ┬┌─┐┌┬┐┌─┐
        │ │ │ ││  │ │ └┬┘  │││├┤  │ ├─┤│ │ ││└─┐
        └─┘ ┴ ┴┴─┘┴ ┴  ┴   ┴ ┴└─┘ ┴ ┴ ┴└─┘─┴┘└─┘
        UTILITY METHODS
    */

    /**
     * Processes the input string by escaping special characters, capitalizing if specified, and applying character escaping.
     *
     * @param inputString The input string to be processed.
     * @return The processed string with escaped characters and applied capitalization.
     */
    private String processVal(String inputString) {
        String processVal;
        if (inputString != null) {
            processVal = Handyman.escapeCharacters(Handyman.capitalizeIf(inputString, capitalize), charsToEscape);
        } else {
            processVal = "";
        }
        return processVal;
    }

    /**
     * Processes the input LocalDate object to a formatted string based on year presence.
     *
     * @param date The LocalDate object to be processed.
     * @return The processed string representation of the date.
     */
    private String processVal(LocalDate date) {
        String processVal;
        if (date != null) {
            if (date.getYear() == 0) {
                processVal = date.format(DateTimeFormatter.ofPattern("MMdd"));
            } else {
                processVal = date.format(DateTimeFormatter.ofPattern("yyyyMMdd"));
            }
        } else {
            processVal = "";
        }
        return processVal;
    }

    /**
     * Processes the input character to a string representation.
     *
     * @param inputChar The input character to be processed.
     * @return The string representation of the input character.
     */
    private String processVal(char inputChar) {
        String processVal;
        if (inputChar != '\u0000') {
            processVal = String.valueOf(inputChar);
        } else {
            processVal = "";
        }
        return processVal;
    }

    /**
     * Returns a string representation of the vCard object.
     * <p>
     * The string representation includes all properties of the vCard, such as identification details,
     * communication details, address details, organization details, and additional details.
     * Each property is formatted according to the vCard syntax.
     *
     * @return A string representation of the vCard object.
     */
    @Override
    public String toString() {
        return capitalize ? core_vCard.toString().toUpperCase() : core_vCard.toString();
    }
}
